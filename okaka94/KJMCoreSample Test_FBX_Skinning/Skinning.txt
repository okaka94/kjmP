// HLSL 
// 정점쉐이더란 정점버퍼에 있는 모든 정점을 
// 1번씩 작업한다.
// 반드시 정점위치(SV_POSITION레지스터에)는 반드시 float4로 반환해야 한다.
// POSITION(시멘틱:의미구조)
struct VS_in
{
	float3 p : POSITION;
	float3 n : NORMAL;
	float4 color : COLOR;
	float2 tex : TEXTURE;

	float4 index : INDEX;
	float4 weight : WEIGHT;
};
struct VS_out
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0; // COLOR0~COLOR1
	float2 t : TEXCOORD0;
	float4 World : TEXCOORD1;
};
cbuffer cb_data : register(b0)
{
	matrix g_World_matrix : packoffset(c0);
	matrix g_View_matrix : packoffset(c4);
	matrix g_Proj_matrix : packoffset(c8);
	float4 g_Color : packoffset(c12);
};
cbuffer cb_Animation : register(b1)
{
	matrix  g_matBone[255];
};

VS_out VS(VS_in input) 
{
	VS_out output = (VS_out)0;
	//  px,py,pz, 1.0f
	float4 Local = float4(input.p,1.0f); // 스위즐링
	float4 Anim=0;
	float4 AnimNormal=0;
	for( int iBone=0; iBone < 4; iBone++)
	{
		uint BoneIndex = input.index[iBone];
		float Weight = input.weight[iBone];
		Anim += mul(Local, g_matBone[iBoneIndex]) * Weight;
		AnimNomal += mul(input.n, g_matBone[iBoneIndex]) * Weight;
	}
	float4 World = mul(Local, g_World_matrix);
	float4 View = mul(World, g_View_matrix);
	float4 Proj = mul(View, g_Proj_matrix);
	output.p = Proj;
	output.n = AnimNomal;
	output.World = World;
	output.c = input.color * g_Color;
	output.t = input.tex;
	return output;
}
// 픽쉘 마다 호출된다.
//v0-------v1
/////////
//////
////
//v2
Texture2D    g_txTexutureA	: register(t0);
SamplerState g_SampleA		: register(s0);

// 해당 픽쉘(SV_Target레지스터에)의 컬러를 반환한다.
float4 PS(	VS_out input) : SV_Target
{
	float4 vColor = g_txTexutureA.Sample(g_SampleA , input.t);	
	return vColor*input.c;
}